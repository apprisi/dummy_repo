https://github.com/jachinte/tensorflow/blob/master/demo.c
https://github.com/tensorflow/tensorflow/issues/8033
https://github.com/wazeerzulfikar/rtensorflow/tree/master/src
https://github.com/johnands/TensorFlowTesting
https://github.com/lixin832500/build-tensorflow
https://github.com/tensorflow/tensorflow/issues/6080
https://github.com/beniz/deepdetect/pull/303/commits/be216ab79117b1a243f6312f9a92b4de8959eda9

Usage: Here's an example on how to load and run a graph:

TF_Status* s = TF_NewStatus();
TF_Graph* graph = TF_NewGraph();

const char* graph_def_data; // <-- your serialized GraphDef here
TF_Buffer graph_def = {graph_def_data, strlen(graph_def_data), nullptr};

// Import `graph_def` into `graph`
TF_ImportGraphDefOptions* import_opts = TF_NewImportGraphDefOptions();
TF_ImportGraphDefOptionsSetPrefix(import_opts, "import");
TF_GraphImportGraphDef(graph, &graph_def, import_opts, s);
assert(TF_GetCode(s) == TF_OK);

// Setup graph inputs
std::vector<TF_Output> inputs;
std::vector<TF_Tensor*> input_values;
// Add the placeholders you would like to feed, e.g.:
TF_Operation* placeholder = TF_GraphOperationByName(graph, "import/my_placeholder");
inputs.push_back({placeholder, 0});
TF_Tensor* tensor = TF_NewTensor(/*...*/);
input_values.push_back(tensor);

// Setup graph outputs
std::vector<TF_Output> outputs;
// Add the node outputs you would like to fetch, e.g.:
TF_Operation* output_op = TF_GraphOperationByName(graph, "import/my_output");
outputs.push_back({output_op, 0});
std::vector<TF_Tensor*> output_values(outputs.size(), nullptr);

// Run `graph`
TF_SessionOptions* sess_opts = TF_NewSessionOptions();
TF_Session* session = TF_NewSession(graph, sess_opts, s);
assert(TF_GetCode(s) == TF_OK);
TF_SessionRun(session, nullptr,
              &inputs[0], &input_values[0], inputs.size(),
              &outputs[0], &output_values[0], outputs.size(),
              nullptr, 0, nullptr, s);

void* output_data = TF_TensorData(output_values[0]);
assert(TF_GetCode(s) == TF_OK);

// If you have a more complicated workflow, I suggest making scoped wrapper
// classes that call these in their destructors
for (int i = 0; i < inputs.size(); ++i) TF_DeleteTensor(input_values[i]);
for (int i = 0; i < outputs.size(); ++i) TF_DeleteTensor(output_values[i]);
TF_CloseSession(session, s);
TF_DeleteSession(session, s);
TF_DeleteSessionOptions(sess_opts);
TF_DeleteImportGraphDefOptions(import_opts);
TF_DeleteGraph(graph);
TF_DeleteStatus(s);
